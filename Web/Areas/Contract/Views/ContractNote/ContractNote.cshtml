@{
    Layout = null;
}
@model List<SSI.ContractManagement.Web.Areas.Contract.Models.ContractNotesViewModel>

<div id="container-contat-notes">
    <!-- Notes text area Div -->
    <div id="contract-div">
        <input type="hidden" id="hidden-contact-notesid" />
        <label for="txtNotes">
            Notes
        </label>
        <br />
        <br />
        <textarea id="txt-notes" class="k-textbox" cols="75" rows="10" style="width: 100%; resize: none; overflow-y: auto; height: 100px; margin-bottom: 5px;"
            data-bind="value:Notes" name="comment"></textarea>
    </div>
    <!-- AddNew Button Div -->
    <div id="button-addnew-container">
        <input type="button" class="k-button" id="btn-addnew" value="Add" disabled="disabled" />
    </div>
    <!-- Contact Notes Grid Div -->
    <div id="add-new-grid-container">
        <div id="grid-contact-notes">
        </div>
        <div id="log">
        </div>
    </div>
</div>
<script id="command-template" type="text/x-kendo-template">
<span> <img src="@Url.Content("~/Content/images/cancel.png")"  data-ContractNoteId="#=ContractNoteId#"  style="cursor:pointer; z-index:10000;" class="Clicktoplay k-grid-cancel" alt="Cancel" title="Cancel" width="23" />   </span>
</script>
<script type="text/javascript">
    $(function() {
        if (window.location.pathname.indexOf('DenialManagement') == 1) {
            $('.k-grid-cancel').attr('disabled', 'disabled');
        }
        $("#txt-notes").keyup(function() {
            if ($("#txt-notes").val() != '') {
                $("#btn-addnew").removeAttr('disabled');
                isContractChange=true;
            } else {
                   $("#btn-addnew").attr('disabled', 'disabled');
            }
        });
        var gridData = @Html.Raw(Json.Encode(Model.ToArray()));
        var contactNotesDataSource = new kendo.data.DataSource({
            data: gridData,
            sort: { field: "ShortDateTime", dir: "desc" }
        });

        $("#grid-contact-notes").kendoGrid({
            dataSource: contactNotesDataSource,
            selectable: "row",
            sortable: true,
            columns: [
                { field: "ShortDateTime", title: "Date - Time(Stamp)", width: 90 },
                { field: "ContractNoteId", hidden: true, width: 80 },
                { field: "UserName", title: "User Name", width: 100 },
                { field: "NoteText", title: "Notes", width: 250 },
                {
                    title: "Actions",
                    width: 35,
                    attributes:{style:"text-align:center;"},
                    template: kendo.template($("#command-template").html()),
                }
            ],
            dataBound: function(e) {
                if (window.location.pathname.indexOf('DenialManagement') > -1) {
                    $('.k-grid-Delete').attr('disabled', 'disabled');
                }
                $("#grid-contact-notes").find('.k-grid-cancel').off('click');
                $("#grid-contact-notes").find('.k-grid-cancel').on('click', function(e) {
                    if (window.location.pathname.indexOf('DenialManagement') > -1) {
                        return false;
                    }
                    var contractNoteID = $(this).attr('data-ContractNoteId');
                    var modeldata = { 'id': contractNoteID };

                    var grid = $("#grid-contact-notes").data("kendoGrid");
                    var selectedRow = grid.select();
                    rowIndex = selectedRow[0].rowIndex;
                    if (window.location.pathname.indexOf('DenialManagement') != 1){
                        ajaxRequestHandler({
                            url: '@Url.Action("DeleteContractNotes", "ContractNote", new { area = "Contract" })',
                            type: 'POST',
                            contentType: "application/json; charset=utf-8",
                            dataType: 'json',
                            data: JSON.stringify(modeldata),
                            fnSuccess: OnDeleteContractNotesSuccess
                        });
                    }
                    e.stopPropagation();
                });
                
            }
        });


        function OnDeleteContractNotesSuccess() {
            var grid = $("#grid-contact-notes").data("kendoGrid");
            var dataContactNotes = grid._data[rowIndex];
            grid.dataSource.remove(dataContactNotes);
        }

        var model = kendo.observable({
            ContactNotes: contactNotesDataSource
        });

        //For addding the new contract notes
        $("#btn-addnew").click(function () {
            $("#btn-addnew").attr('disabled', 'disabled');
            var info = { 'ContractId': $('#hidden-basicinfo-contractid').val(), 'NoteText': $("#txt-notes").val(), 'ContractNoteId': $('#hidden-contact-notesid').val(),'CurrentDateTime':getCurrentDateTime()};
        
            ajaxRequestHandler({
                url: '@Url.Action("SaveContractNotes", "ContractNote", new { area = "Contract" })',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                data: JSON.stringify(info),
                fnSuccess: OnSaveContractNotesSuccess
            });
         });

        function OnSaveContractNotesSuccess(data) {
            contactNotesDataSource.add({
                ContractNoteId: data.Id,
                UserName: data.userName,
                NoteText: $("#txt-notes").val(),
                ShortDateTime: data.insertedTime
            });
            $("#txt-notes").val('');
            $('#hidden-contact-notesid').val('');
            $("#btn-addnew").attr('disabled', 'disabled');
                  
            $("#btn-contract-done").attr('value', 'Done')
            if(isContractChange){
                ContinueNavigate();
                isContractChange=false;
            }
            isContractChange=false;
        }
        kendo.bind($("#container-contat-notes"), model);
        $("#btn-addnew").attr('disabled');
    });
    var dateRegExp = /^\/Date\((.*?)\)\/$/;
    var seconddateRegExp = /^((0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2})*$/;
    //Format date
    function toDate(value) {
        if (value != null) {
            var date = dateRegExp.exec(value);
            if(dateRegExp.exec(value) !=null) //Edit Mode
            {
                return dateFormat(new Date(parseInt(date[1])), "MM/DD/YYYY HH:MM:SS");
            }

            if(seconddateRegExp.exec(value) !=null)   //Add Mode
            {
                var today = new Date(); 
                var todayUtc = new Date(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(),  today.getUTCHours(), today.getUTCMinutes(), today.getUTCSeconds());
                return dateFormat(todayUtc, "MM/DD/YYYY HH:MM:SS");
            }
        }
        return '';
    }

    function dateFormat(date, format) {
        // Calculate date parts and replace instances in format string accordingly
        format = format.replace("DD", (date.getDate() < 10 ? '0' : '') + date.getDate()); // Pad with '0' if needed
        format = format.replace("MM", (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1)); // Months are zero-based
        format = format.replace("YYYY", date.getFullYear());
        format = format.replace("HH", date.getHours());
        format = format.replace("MM", date.getMinutes());
        format = format.replace("SS", date.getSeconds());
        return format;
    }
   
</script>
